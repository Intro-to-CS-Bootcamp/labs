[{"chapter":"CHAPTER 10: RECURSION","questions":[{"exact":false,"answer":"21","question":[">> def sum_up(x)",">>   if x == 0",">>     x",">>   elsif x % 2 == 0",">>     x + sum_up(x / 2)",">>   else",">>     x + sum_up(x / 4)",">>   end",">> end",">> sum_up(12)"]},{"exact":false,"answer":"4","question":["(Continued from Question 1) ","How many times was the sum_up function called in total?"]},{"exact":true,"answer":"countdown(n - 1)","question":["Fill in the code on the empty line so that the function accurately counts down (prints) a number n from n to 0. (Hint: You do not need to and should not use \"return\")",">> def countdown(n)",">>   if n == 0",">>     puts 0",">>   else",">>     puts n",">>     ___________________",">>   end",">> end"]},{"exact":true,"answer":"is_odd(x - 1); is_even(x - 1)","question":["Mutual recursion is a recursion when two functions are defined in terms of each other. Fill in the blanks so that is_even and is_odd call each other to find out if a number is even or odd. Use the semicolon notation we use for multi-line returns.",">> def is_even(x)",">>   if x == 0",">>     puts 'it was even'",">>   else",">>     __________________",">>   end",">> end",">> ",">> def is_odd(x)",">>   if x == 0",">>     puts 'it was odd'",">>   else",">>     __________________",">>   end",">> end"]},{"exact":false,"answer":"True","question":[">> def has_key(key, number)",">>   digit = number % 10",">>   if digit == key",">>     true",">>   end",">>   has_key(key, number / 10)",">> end",">> puts has_key(7, 27539)"]},{"exact":false,"answer":"86","question":["`list.max` returns the maximum value of a list and `list.min` returns the minimum",">> def func(list, depth)",">>   if depth == 0",">>     list.max",">>   else",">>     result = []",">>     list.each do |sublist|",">>       result.push(func(sublist, depth - 1))",">>     end",">>     result.min",">>   end",">> end",">> puts func([[[98, 84], [88, 74]],","              [[13, 86], [60, 99]]], 2)"]}]}]
