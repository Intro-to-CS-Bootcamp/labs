file start

CHAPTER 13. CREATING NEW CLASSES, CHANGING EXISTING ONES

exact
Customers are really mad! Game over.; nil
For Q1-3, please input the LAST line displayed in the interpreter. (Don't forget the nil)
>> class BobaGame
>> def initialize(name)
>>      @name = name
>>      @balance = 20
>>      @stock = 0
>>      @customer_number = 0
>>      puts "Welcome, #{@name}. Good luck!"
>>   end
>>
>>  def restock(number)
>>      @stock += number
>>      @balance -= number * 3
>>  end
>>
>>  def customer(number)
>>      @customer_number += number
>>      if @stock < @customer_number
>>          puts "Customers are really mad! Game over."
>>          exit
>>      end
>>      @stock -= @customer_number
>>      @balance += @customer_number * 5
>>      @customer_number = 0
>>      if @balance < 0 
>>          puts "Oops! You went bankrupt! Game over."
>>          exit
>>      elsif @balance >= 35
>>          puts "Congratulations! You are advancing to the next level!"
>>          exit
>>      end
>>      puts 'Next day...'
>>  end
>> end
>>
>> ucha = BobaGame.new 'Ucha'
>> ucha.restock(4)
>> ucha.customer(3)
>> ucha.restock(4)
>> ucha.customer(6)

exact
Congratulations! You are advancing to the next level!; nil
>> sharetea = BobaGame.new 'ShareTea'
>> sharetea.restock(6)
>> sharetea.customer(4)
>> sharetea.restock(4)
>> sharetea.customer(6)

exact
Next day...; nil
>> gongcha = BobaGame.new 'GongCha'
>> gongcha.restock(5)
>> gongcha.customer(3)
>> gongcha.restock(4)
>> gongcha.customer(4)

exact
I am an apple; yeee; nil
(Please include in all puts displayed in the processs)
>> class MyStuff
>>  def initialize()
>>      @la = "yeee"
>>  end
>>  def la
>>		@la
>> 	end
>>  def apple()
>>      puts "I am an apple"
>>  end
>>end
>>
>>thing = MyStuff.new()
>>thing.apple()
>>puts thing.la

exact
Under the moonlight; you see a sight that almost stops your heart; nil
Sing me a song!
>> class Song
>>  def initialize(lyrics)
>>      @lyrics = lyrics
>>  end
>>  def sing_me_a_song()
>>      @lyrics.each {|line| puts line}
>>  end
>> end
>>
>> michael_jackson = Song.new(["Under the moonlight",
>> 							   "you see a sight that almost stops your heart"]
>>			
>> logic = Song.new(["Red light stop, green light go",
>> 					 "my mind goes crazy but I still look hella calm"])
>>
>> michael_jackson.sing_me_a_song()
  
exact  
Red light stop, green light go; my mind goes crazy but I still look hella calm
(Continued from last question)
>> logic.sing_me_a_song()

chapter end


CHAPTER 14. BLOCKS AND PROCS

exact
"3 bars of..."
Chocolate Bars (remember format for returning strings!)
>> choco = Proc.new do |bar|
>> 	bar.to_s + ' bars of...'
>> end
>> choco.call(3)

exact
"3 bars of... succulent delight"
(continued from last question)
>> bar = Proc.new do |bite, crunchy| 
>> 	(bite.call(3)) + crunchy
>> end
>> bar.call(choco, " succulent delight")

exact
5 calls; Calling 5; 4 calls; 5
Team Meeting (Don't forget the return value)
>> def incredible(team, ing)
>>	team.call(ing)
>>	ing = ing 
>> end
>> meeting = Proc.new do |room|
>>	puts room.to_s + " calls"
>>	if room < 5
>>		ing = room
>>	else
>>		puts "Calling " + room.to_s
>>		meeting.call(room - 1)
>>	end
>> end
>> incredible(meeting, 5)

exact
still growing; still growing; "grown"
#Question 3: Herbology Class
>> def plant(seeds, soil)
>>	if seeds % 5 == 0
>>		return "grown"
>>	end
>> soil.call(seeds + 1)
>> end
>> def leaves(green)
>>	green % 3 < green / 3
>> end
>> sprout = Proc.new do |grow|
>>	if leaves(grow)
>>		puts "grow " + grow.to_s
>>	end
>>	puts "still growing"
>>	plant(grow + 1, sprout)
>> end
>> plant(1, sprout)

exact
"grown"
(continued from last question)
>> plant(10, sprout)

!exact
result.push(f.call(item))
Fill in the blanks for the method map below that takes in an array of numbers, applies a function f to every element of the array, and returns the new array.
>> # Example:
>> # add_two = Proc.new do |x|
>> #  	x + 1
>> #  end
>> # map [1, 2, 3], add_two
>> # => [3, 4, 5]
>> 
>> def map(lst, f)
>>	result = []
>>	lst.each do |item|
>>		__________________________
>>	end
>>	result
>> end

chapter end